enum VotingAdapterName {
  OffchainVotingContract
  VotingContract
}

enum VotingState {
  NOT_STARTED
  TIE
  PASS
  NOT_PASS
  IN_PROGRESS
  GRACE_PERIOD
}

type TributeDao @entity {
  "Unique identifier and primary key of the `TributeDao` entity"
  id: ID! # Set to `${tribute.id}
  "The DAO address"
  daoAddress: Bytes
  "The name of the DAO"
  name: String
  "The DAO creator address"
  creator: Bytes
  createdAt: String
  "Total units minted for the DAO"
  totalUnits: String
  "Total units issued and outstanding"
  totalUnitsIssued: String
  "The bank of the DAO"
  bank: Bank! @derivedFrom(field: "tributeDao")
  "List of registered adapters"
  adapters: [Adapter!]! @derivedFrom(field: "tributeDao")
  "List of registered extensions"
  extensions: [Extension!]! @derivedFrom(field: "tributeDao")
  "List of members in the DAO"
  members: [Member]! @derivedFrom(field: "tributeDaos")
  "List of proposals in the DAO"
  proposals: [Proposal]! @derivedFrom(field: "tributeDao")
  "List of nfts in the DAO"
  nftCollection: NFTCollection! @derivedFrom(field: "tributeDao")
  "List of redeemed coupons"
  coupons: [Coupon]! @derivedFrom(field: "tributeDao")
}

type Member @entity {
  "Unique identifier and primary key of the `Member` entity"
  id: ID! # Set to `${member.id}`
  memberAddress: Bytes
  createdAt: String
  delegateKey: Bytes
  units: BigInt!
  tokenHoldings: [TokenHolder!] @derivedFrom(field: "member")
  proposals: [Proposal!] @derivedFrom(field: "member")
  didFullyRagequit: Boolean
  isDelegated: Boolean
  "List of DAOs the member belongs to"
  tributeDaos: [TributeDao!]!
}

type Proposal @entity {
  "Unique identifier and primary key of the `Proposal` entity"
  id: ID! # Set to `${tribute.id}-proposal-${proposal.id}`
  proposalId: Bytes!
  flags: BigInt!
  submittedBy: Bytes
  sponsored: Boolean
  sponsoredAt: String
  sponsoredBy: Bytes
  processed: Boolean
  processedAt: String
  processedBy: Bytes
  member: Member
  tributeDao: TributeDao

  "Adapter ID of the proposal"
  adapterId: Bytes
  "Adapter contract address of the proposal"
  adapterAddress: Bytes
  "Voting adapter address"
  votingAdapter: Bytes

  # ONBOARDING; proposal details
  unitsToMint: Bytes
  amount: BigInt
  unitsRequested: BigInt
  token: Bytes
  applicant: Bytes

  # DISTRIBUTE; proposal details
  "The unit holder address that will receive the funds. If 0x0, the funds will be distributed to all members of the DAO"
  unitHolderAddr: Bytes
  "The distribution status or the kick status"
  status: String
  "Current iteration index to control the cached for-loop"
  currentIndex: BigInt
  "The block number in which the proposal/or vote results has been created"
  blockNumber: BigInt

  # TRIBUTE; proposal details
  "The address of the DAO internal token to be minted to the applicant."
  tokenToMint: Bytes
  "The amount requested of DAO internal tokens"
  requestAmount: BigInt
  "The amount of tribute tokens."
  tributeAmount: BigInt
  "The owner of the ERC-20 tokens being provided as tribute."
  tributeTokenOwner: Bytes

  # TRIBUTE NFT; propoal details
  "The address of the ERC-721 token that will be transferred to the DAO in exchange for DAO internal tokens."
  nftAddr: Bytes
  "The nft token identifier."
  nftTokenId: BigInt

  # GUILDKICK; proposal details
  "The address of the member to kick out of the DAO."
  memberToKick: Bytes

  # FINANCING; proposal details
  "Additional details for the financing proposal"
  details: Bytes

  # MANAGING; proposal details
  "Additional details for the managing proposal"
  adapterOrExtensionId: Bytes
  adapterOrExtensionAddr: Bytes
  keys: [Bytes!]
  values: [BigInt!]

  # OFFCHAIN VOTES: additional info
  snapshot: BigInt
  proposalHash: Bytes
  reporter: Bytes
  resultRoot: Bytes
  nbNo: BigInt
  nbYes: BigInt
  index: BigInt
  startingTime: BigInt
  gracePeriodStartingTime: BigInt
  isChallenged: Boolean
  stepRequested: BigInt
  forceFailed: Boolean
  fallbackVotesCount: BigInt

  # ONCHAIN VOTES: additional info
  votes: BigInt

  votingState: String
  votingResult: Vote
}

type Vote @entity {
  "Unique identifier and primary key of the `Vote` entity"
  id: ID! # Set to `${tribute.id}-vote-${proposal.id}`
  nbNo: BigInt!
  nbYes: BigInt!
  adapterName: VotingAdapterName!
  adapterAddress: Bytes!
  proposal: Proposal
}

type Bank @entity {
  "Unique identifier and primary key of the `Bank` entity"
  id: ID! # Set to `${tribute.id}-bank-${bank.id}`
  "The bank of the DAO"
  bankAddress: Bytes!
  tributeDao: TributeDao!
}

type Token @entity {
  "Unique identifier and primary key of the `Token` entity"
  id: ID! # Set to `${tribute.id}-token-${token.id}`
  name: String
  symbol: String
  tokenAddress: Bytes!
  totalSupply: BigInt
  holders: [TokenHolder!] @derivedFrom(field: "token")
}

type TokenHolder @entity {
  id: ID! # Set to `${tribute.id}-tokenholder-${memberAddress.id}`
  member: Member
  balance: BigInt
  token: Token #`${tribute.id}-token-${token.id}`
}

type NFT @entity {
  "Unique identifier and primary key of the `NFT` entity"
  id: ID! # Set to `${tribute.id}-nft-${nftAddress.id}-$tokenId}`
  nftAddress: Bytes!
  tokenId: BigInt!
  from: Bytes
  to: Bytes
  nftCollection: NFTCollection
}

type NFTCollection @entity {
  "Unique identifier and primary key of the `NFTCollection` entity"
  id: ID! # Set to `${tribute.id}-nftcollection-${extensionAddress}`
  nfts: [NFT!] @derivedFrom(field: "nftCollection")
  tributeDao: TributeDao!
}

type Adapter @entity {
  "Unique identifier and primary key of the `Adapter` entity"
  id: ID! # Set to `${tribute.id}-adapter-${adapter.id}`
  adapterId: Bytes!
  adapterAddress: Bytes!
  "Adapter acl (access control layer)"
  acl: BigInt!
  tributeDao: TributeDao
}

type Extension @entity {
  "Unique identifier and primary key of the `Extension` entity"
  id: ID! # Set to `${tribute.id}-extension-${extension.id}`
  "Extension contract address"
  extensionAddress: Bytes!
  "Extension ID"
  extensionId: Bytes!
  tributeDao: TributeDao
}

type Coupon @entity {
  "Unique identifier and primary key of the `Coupon` entity"
  id: ID! # Set to `${tribute.id}-coupon-${nonce}-${authorizedMember}`
  redeemedAt: String!
  "Authorized member address"
  authorizedMember: Bytes!
  amount: BigInt!
  nonce: BigInt!
  tributeDao: TributeDao
}
