
âÚtype Molochv3 @entity {
  id: ID!
  "The DAO address"
  daoAddress: Bytes
  "The name of the DAO"
  name: String
  "The DAO creator address"
  creator: Bytes
  totalShares: String
  createdAt: String
  # "The bank of the DAO"
  # bank: Bank
  "List of registered adapters"
  adapters: [Adapter!]! @derivedFrom(field: "molochv3")
  "List of registered extensions"
  extensions: [Extension!]! @derivedFrom(field: "molochv3")
}

type Member @entity {
  id: ID!
  memberAddress: Bytes
  createdAt: String
  delegateKey: Bytes
  shares: BigInt!
  loot: BigInt!
  lockedLoot: BigInt!
  tokenBalances: [TokenBalance!] @derivedFrom(field: "member")
  proposals: [Proposal!] @derivedFrom(field: "member")
  isDelegated: Boolean
  isJailed: Boolean
  didFullyRagequit: Boolean
}

type Proposal @entity {
  id: ID!
  proposalId: Bytes!
  flags: BigInt!
  submittedBy: Bytes
  sponsored: Boolean
  sponsoredAt: String
  sponsoredBy: Bytes
  processed: Boolean
  processedAt: String
  processedBy: Bytes
  member: Member

  # offchain votes
  snapshot: BigInt
  proposalHash: Bytes
  reporter: Bytes
  resultRoot: Bytes
  # nbVoters: BigInt
  # nbNo: BigInt
  # nbYes: BigInt
  index: BigInt
  startingTime: BigInt
  gracePeriodStartingTime: BigInt
  isChallenged: Boolean
  fallbackVotes: Boolean
  fallbackVotesCount: BigInt

  # onchain votes
  votes: BigInt

  offChainVotes: Vote
  onChainVotes: Vote

  # onboarding; proposal details
  tokenToMint: Bytes
  amount: BigInt
  sharesRequested: BigInt
  token: Bytes
  applicant: Bytes
  proposer: Bytes

  # distribute; proposal details
  "The share holder address that will receive the funds. If 0x0, the funds will be distributed to all members of the DAO"
  shareHolderAddr: Bytes
  "The distribution status or the kick status"
  status: String
  "Current iteration index to control the cached for-loop"
  currentIndex: BigInt
  "The block number in which the proposal/or vote results has been created"
  blockNumber: BigInt

  # tribute; proposal details
  "The amount requested of DAO internal tokens"
  requestAmount: BigInt
  "The amount of tribute tokens."
  tributeAmount: BigInt

  # guildkick; proposal details
  "Keeps track of the latest ongoing kick proposal per DAO to ensure only 1 kick happens at a time."
  ongoingKicks: Bytes
  "The address of the member to kick out of the DAO."
  memberToKick: Bytes
  "The number of shares of the member that should be burned."
  tokensToBurn: BigInt

  # financing; proposal details
  "Additional details about the financing proposal"
  details: Bytes

  # managing; proposal details
  adapterId: Bytes
  adapterAddress: Bytes
  keys: [Bytes!]
  values: [BigInt!]
}

type Vote @entity {
  id: ID!
  nbNo: BigInt!
  nbYes: BigInt!
  nbVoters: BigInt
  proposal: Proposal
}

type Bank @entity {
  id: ID!
  bankAddress: Bytes
  daoAddress: Bytes
  balance: BigInt
  createdAt: String
  totalShares: BigInt
  molochv3: Molochv3
}

type Token @entity {
  id: ID!
  tokenAddress: Bytes!
  balance: BigInt
}

type TokenBalance @entity {
  id: ID!
  token: Token! #[Token!]
  tokenBalance: BigInt!
  member: Member
}

type Adapter @entity {
  id: ID!
  adapterId: Bytes!
  adapterAddress: Bytes!
  "Adapter acl (access control layer)"
  acl: BigInt!
  molochv3: Molochv3
}

type Extension @entity {
  id: ID!
  "Extension contract address"
  extensionAddress: Bytes!
  "Extension ID"
  extensionId: Bytes!
  molochv3: Molochv3
}
Ú